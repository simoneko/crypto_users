{"version":3,"sources":["components/AddPerson.js","components/Person.js","components/PersonList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddPerson","state","nickname","email","ip","errors","exists","messages","email_incorrect","ip_incorrect","exists_incorrect","handleChange","e","name","target","id","value","_this","setState","Object","defineProperty","formValidation","correct","ipReg","RegExp","findUser","props","find","test","dateGenerator","creationDate","Date","now","hour","getHours","minutes","getMinutes","day","getDate","month","getMonth","getFullYear","handleSubmit","validation","fullDate","_this$state","add","react_default","a","createElement","className","htmlFor","type","placeholder","this","onChange","onClick","Component","Person","_props$person","person","delete","PersonList","personsList","list","map","components_Person","key","sortColumn","length","deleteAll","App","counter","persons","addPerson","prevState","concat","toConsumableArray","deletePerson","confirm","filter","nick","mail","findNick","findMail","data","sort","b","localeCompare","components_AddPerson","components_PersonList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64a91bd0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../styles/AddPerson.css';\r\n\r\nclass AddPerson extends Component {\r\n\r\n  state = {\r\n    nickname: '',\r\n    email: '',\r\n    ip: '',\r\n\r\n    errors: {\r\n      email: false,\r\n      ip: false,\r\n      exists: false\r\n    }\r\n  }\r\n\r\n  //lista wyswietlanych bledow przy walidacji\r\n  messages = {\r\n    email_incorrect: \"Invalid email format\",\r\n    ip_incorrect: \"Invalid IP format\",\r\n    exists_incorrect: \"Nickname/email already exists\"\r\n  }\r\n\r\n  //kontrolowanie inputow formularza\r\n  handleChange = (e) => {\r\n    const name = e.target.id;\r\n    const value = e.target.value;\r\n    this.setState({\r\n      [name]: value\r\n    })\r\n  }\r\n\r\n  //walidacja formularza\r\n  formValidation = () => {\r\n    let email = false;\r\n    let ip = false;\r\n    let exists = false;\r\n    let correct = false;\r\n\r\n    //wyrazenia regularne do sprawdzenia maila i IP\r\n    const mailReg = /^[0-9a-zA-Z_.-]+@[0-9a-zA-Z.-]+\\.[a-zA-Z]{2,3}$/;\r\n    const ipReg = /[0-2]{1}[0-5]{2}\\.[0-2]{1}[0-5]{2}\\.[0-2]{1}[0-5]{2}\\.[0-2]{1}[0-5]{2}$/y;\r\n\r\n    let findUser = this.props.find(this.state.nickname, this.state.email);\r\n\r\n    if (mailReg.test(this.state.email)) {\r\n      email = true;\r\n    }\r\n\r\n    if (ipReg.test(this.state.ip)) {\r\n      ip = true;\r\n    }\r\n\r\n    if (!findUser) {\r\n      exists = true;\r\n    }\r\n\r\n    //sprawdzenie, czy wszystkie pola sa poprawnie uzupelnione\r\n    if (email && ip && exists) {\r\n      correct = true;\r\n    }\r\n\r\n    return ({\r\n      email,\r\n      ip,\r\n      exists,\r\n      correct\r\n    })\r\n\r\n  }\r\n\r\n  //generacja daty dodania uzytkownika\r\n  dateGenerator = () => {\r\n    let creationDate = Date.now(),\r\n      hour = new Date(creationDate).getHours(),\r\n      minutes = new Date(creationDate).getMinutes(),\r\n      day = new Date(creationDate).getDate(),\r\n      month = new Date(creationDate).getMonth() + 1,\r\n      year = new Date(creationDate).getFullYear();\r\n\r\n    if (hour < 10) hour = \"0\" + hour;\r\n    if (minutes < 10) minutes = \"0\" + minutes;\r\n    if (day < 10) day = \"0\" + day;\r\n    if (month < 10) month = \"0\" + month;\r\n\r\n    //data w formacie MM.DD.YYYY HH:MM\r\n    return month + \"-\" + day + \"-\" + year + \" \" + hour + \":\" + minutes;\r\n  }\r\n\r\n  //obsluga klikniecia w przycisk dodawania uzytkownika\r\n  handleSubmit = () => {\r\n\r\n    const validation = this.formValidation();\r\n\r\n    if (validation.correct) {\r\n\r\n      const fullDate = this.dateGenerator();\r\n      const { nickname, email, ip } = this.state;\r\n      const add = this.props.add(nickname, email, ip, fullDate);\r\n\r\n\r\n      if (add) {\r\n        this.setState({\r\n          nickname: '',\r\n          email: '',\r\n          ip: '',\r\n\r\n          errors: {\r\n            email: false,\r\n            ip: false,\r\n            exists: false\r\n          }\r\n        })\r\n      }\r\n    } else {\r\n      this.setState({\r\n        errors: {\r\n          email: !validation.email,\r\n          ip: !validation.ip,\r\n          exists: !validation.exists\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"form\">\r\n        <div>\r\n          <label htmlFor=\"nickname\">Nickname\r\n          <br />\r\n            <input\r\n              type=\"text\"\r\n              id=\"nickname\"\r\n              placeholder=\"Enter nickname\"\r\n              value={this.state.nickname}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div>\r\n          <label className={this.state.errors.email ? 'error' : null} htmlFor=\"email\">Email\r\n          <br />\r\n            <input\r\n              type=\"email\"\r\n              id=\"email\"\r\n              placeholder=\"Enter email\"\r\n              value={this.state.email}\r\n              onChange={this.handleChange}\r\n              className={this.state.errors.email ? 'error' : null}\r\n            />\r\n            <span className={this.state.errors.email ? \"spanError\" : null} >{this.state.errors.email && this.messages.email_incorrect}</span>\r\n          </label>\r\n        </div>\r\n        <div>\r\n          <label className={this.state.errors.ip ? 'error' : null} htmlFor=\"ip\">IP address\r\n          <br />\r\n            <input\r\n              type=\"text\"\r\n              id=\"ip\"\r\n              placeholder=\"Enter IP addres\"\r\n              value={this.state.ip}\r\n              onChange={this.handleChange}\r\n              className={this.state.errors.ip ? 'error' : null}\r\n            />\r\n            <span className={this.state.errors.ip ? \"spanError\" : null} >{this.state.errors.ip && this.messages.ip_incorrect}</span>\r\n          </label>\r\n        </div>\r\n        <br />\r\n        <button onClick={this.handleSubmit} >Add user</button>\r\n        <span className={this.state.errors.exists ? \"spanError\" : null} >{this.state.errors.exists && this.messages.exists_incorrect}</span>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddPerson;","import React from 'react';\r\nimport '../styles/Person.css';\r\n\r\nconst Person = (props) => {\r\n\r\n  const { id, nickname, email, ip, creationDate } = props.person;\r\n\r\n  return (\r\n    <tr>\r\n      {/* jezeli pole 'nickname' jest puste, to wpisz '-' */}\r\n      <td>{nickname === '' ? \"-\" : nickname}</td>\r\n      <td>{email}</td>\r\n      <td>{ip}</td>\r\n      <td>{creationDate}</td>\r\n      <td><button onClick={() => props.delete(id)} >X</button></td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default Person;","import React from 'react';\r\nimport Person from './Person';\r\nimport '../styles/PersonList.css';\r\n\r\nconst PersonList = (props) => {\r\n\r\n  //mapowanie listy uzytkownikow wg. stanu glownego komponentu App\r\n  const personsList = props.list.map(person => <Person key={person.id} person={person} delete={props.delete} />)\r\n\r\n  return (\r\n    <div className=\"table\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            {/* dodanie sortowania po kliknieciu na kolumne */}\r\n            <th onClick={() => props.sortColumn('nickname')} >Nickname</th>\r\n            <th onClick={() => props.sortColumn('email')} >Email</th>\r\n            <th>IP address</th>\r\n            <th onClick={() => props.sortColumn('creationDate')} >Creation date</th>\r\n            {/* jezeli nie ma zadnego uzytkownika, to nie wyswietlaj przycisku usuwania calej listy */}\r\n            <th>{personsList.length > 0 && <button onClick={props.deleteAll} >X</button>}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {personsList}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PersonList;","/* eslint-disable no-restricted-globals */\nimport React, { Component } from 'react';\nimport '../styles/App.css';\nimport AddPerson from './AddPerson';\nimport PersonList from './PersonList';\n\nclass App extends Component {\n\n  //counter do inkrementacji id uzytkownikow\n  counter = 5;\n\n  //lista uzytkownikow\n  state = {\n    persons: [\n      {\n        id: 0,\n        nickname: \"Randomowicz\",\n        email: \"randomowicz@o2.pl\",\n        ip: \"255.111.222.000\",\n        creationDate: \"05-02-2019 20:12\"\n      },\n      {\n        id: 1,\n        nickname: \"Loremiarz\",\n        email: \"loremiarz@gmail.com\",\n        ip: \"255.111.100.121\",\n        creationDate: \"06-03-2019 11:02\"\n      },\n      {\n        id: 2,\n        nickname: \"Lutnik\",\n        email: \"lutnik@tlen.pl\",\n        ip: \"232.111.111.121\",\n        creationDate: \"06-01-2019 18:19\"\n      },\n      {\n        id: 3,\n        nickname: \"Wilczur\",\n        email: \"wilczek@maly.pl\",\n        ip: \"128.111.128.121\",\n        creationDate: \"05-28-2019 10:05\"\n      },\n      {\n        id: 4,\n        nickname: \"Kapturek\",\n        email: \"zielony@przezlas.pl\",\n        ip: \"255.111.222.121\",\n        creationDate: \"06-01-2019 20:12\"\n      },\n    ]\n  }\n\n  //dodawanie uzytkownika do listy\n  addPerson = (nickname, email, ip, fullDate) => {\n    const person = {\n      id: this.counter,\n      nickname,\n      email,\n      ip,\n      creationDate: fullDate\n    }\n    this.counter++;\n\n    this.setState(prevState => ({\n      persons: [...prevState.persons, person]\n    }))\n\n    return true;\n  }\n\n  //kasowanie pojedynczego uzytkownika\n  deletePerson = (id) => {\n    if (confirm(\"Are you sure you want to delete this user?\")) {\n      let persons = [...this.state.persons];\n      persons = persons.filter(person => person.id !== id);\n      this.setState({\n        persons\n      })\n    }\n  }\n\n  //kasowanie wszystkich uzytkownikow\n  deleteAll = () => {\n    if (confirm(\"Are you sure you want to delete every user?\")) {\n      this.setState({\n        persons: []\n      })\n    }\n  }\n\n  //sprawdzenie, czy uzytkownik o podanym nickname/email juz istnieje\n  findUser = (nick, mail) => {\n    const findNick = (this.state.persons.filter(person => person.nickname === nick));\n    const findMail = (this.state.persons.filter(person => person.email === mail))\n    //jezeli istnieje - zwroc true\n    if (((findNick.length > 0) && (nick !== \"\")) || (findMail.length > 0)) return true\n    else return false;\n  }\n\n  // sortowanie kolumn w tablicy\n  sortColumn = (key) => {\n    const data = this.state.persons;\n    data.sort((a, b) => a[key].localeCompare(b[key]));\n    this.setState({\n      persons: data\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Crypto users</h1>\n        <AddPerson\n          add={this.addPerson}\n          find={this.findUser}\n        />\n        <br />\n        <PersonList\n          list={this.state.persons}\n          delete={this.deletePerson}\n          deleteAll={this.deleteAll}\n          sortColumn={this.sortColumn}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}